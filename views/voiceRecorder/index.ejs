
<!DOCTYPE html>
<html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI Voice Recorder</title>
            <link rel="icon" type="image/x-icon" href="/css/aiv.png">
            <link rel="stylesheet" href="/css/styles.css">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
            <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
            <style>
                 footer {
    backdrop-filter: blur(10px); 
    -webkit-backdrop-filter: blur(10px); 
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.18);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
}
header {
    display: flex;
    align-items: center;
    justify-content: center;
}

.header-logo {
    height: 50px;
    margin-right: 20px; 
}

header h1 {
    margin: 0; 
    
}
#alerts-container {
    position: fixed;
    bottom: 100px; /* Adjust this value based on the height of your footer */
    left: 0;
    right: 0;
    z-index: 1050; /* High z-index to ensure it's above other elements */
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}

#alerts-container .alert {
    max-width: 60%; /* Adjust this value as needed */
    margin-top: 20px; /* Add some space above the alert */
    justify-content: center;
    align-items: center;
    text-align: center;
}


#next-btn {
    position: relative; /* Ensure it's positioned in the stacking context */
    z-index: 2000; /* Above the blur overlay */
    /* Style your button as needed */
}
.glow-button {
    position: relative;
    z-index: 2000; /* Above the blur overlay */
    /* Style your button as needed */

    /* Glow effect */   
    box-shadow: 0 0 15px rgba(81, 203, 238, 1); /* Adjust color and size as needed */
    transition: box-shadow 0.3s ease-in-out;
}

.glow-button:hover {
    box-shadow: 0 0 20px rgba(81, 203, 238, 1); /* Larger glow on hover */
}




            </style>
        </head>
        <body>
            <!-- <div id="blur-overlay"></div> -->
            <div id="overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; z-index: 3000;">
                <button id="start-btn" class="btn btn-primary">Start</button>
                <button id="skip-btn" class="btn btn-secondary">Skip</button>
            </div>
            <header>
                <img src="/css/aiv.png" alt="Logo" class="header-logo">
                <h1>AI Voice Recorder</h1>
            </header> 
            <div class="content-wrapper">
                  <main class="container-parent">
                <div id="alerts-container"></div>
                <div class="container">
                    <div id="instructions">   
                        <p>Please read the following text aloud:</p>
                        <blockquote style="display: flex; justify-content: center ; align-items: center;">
                            <!-- Dynamic text to read will go here -->
                            <div class="info-block">
                                <div class="info-background">
                                    <img src="/css/titredepartdestination.png" alt="" />
                                </div>
                                <div class="info-text">                                    
                                    <span class="info-data" id="line"><%= randomText %></span>
                                </div>
                            </div>
                            
                        </blockquote>
                    </div>
                    <div id="recorder">
                        <div id="recorder">
                            <input type="checkbox" name="toggle" id="record-toggle">                            
                            <svg viewBox="0 0 100 100">
                                <circle cx="50%" cy="50%" r="45" class="circle-svg" />
                            </svg>
                             
                            <div class="mic">
                                <div class="mic__head"></div>
                                <div class="mic__neck"></div>
                                <div class="mic__leg"></div>
                            </div>
                            
                            <div class="recording">
                                <div class="round"></div>
                                <div class="round"></div>
                                <div class="round"></div>
                            </div>
                            
                            <label for="record-toggle" class="toggle-label"></label>
                        
                     </div>                   
                    
    
                </div>
                <audio id="audio-player" src="" hidden></audio>

                <button id="next-btn" class="btn btn-primary glow-button" hidden>Next</button>

                <div id="audio-player-container">
                    <!-- Audio player will be inserted here -->
                </div>
                
                </div>
            </main>
            <footer>
                <div class="footer-content">
                    <p>© 2023 EHEIO Engineering School Voice Data Collection Project</p>
                    <p>In collaboration with C'est Carré and Majal Berkane</p>
                    <p><a href="/privacy-policy">Privacy Policy</a></p>
                </div>
            </footer>
            </div>
          
            
            <script>
              document.addEventListener('DOMContentLoaded', () => {

                

            // ###############################################################################################



                let mediaRecorder;
    let audioChunks = [];
    let isRecording = false;
    let isTutorial = false;                
    const recordToggle = document.getElementById('record-toggle');
    const recordingVisuals = document.querySelector('.recording');
    const alertsContainer = document.getElementById('alerts-container');
    let stream;
    recordToggle.addEventListener('change', async () => {
        if (!isRecording) {
            

                try {
                    if(isTutorial == false){
                stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };
                   
                mediaRecorder.onstop = async () => {
                    const audioBlob = new Blob(audioChunks);
                    const audioUrl = URL.createObjectURL(audioBlob);
                    // createAudioPlayer(audioUrl);
                    createAlert('Recording finished successfully!', 'success');
                    audioChunks = [];
                    await sendAudioToServer(audioBlob);
                };
                mediaRecorder.start();
                isRecording = true;
            }
                recordingVisuals.style.opacity = 1;
            } catch (error) {
                createAlert('Error accessing microphone: ' + error.message, 'danger');
            }
            
           
        } else {
            mediaRecorder.stop();
        mediaRecorder = null;
        if (stream) {
            stream.getTracks().forEach(track => track.stop()); // Stop each track of the stream
        }
        stream = null;
        isRecording = false;
        recordingVisuals.style.opacity = 0;
        audioChunks = [];
        }
    });

    
    async function sendAudioToServer(audioBlob) {
        try {
            if(isTutorial == false){
                const formData = new FormData();
            formData.append('audio', audioBlob);
            let mytext = document.getElementById('line').innerText;
            formData.append('text', mytext);

            const response = await fetch('/submit-audio', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            if (data.randomText) {
                document.getElementById('line').innerText = data.randomText;
            }
            }
            
        } catch (error) {
            console.error('Error sending audio:', error);
        }
    }

    function createAlert(message, type) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.role = 'alert';
        alert.innerHTML = `
            <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        `;
        alertsContainer.appendChild(alert);

        // Auto-dismiss alert after 5 seconds
        setTimeout(() => {
            $(alert).alert('close'); // Using jQuery if Bootstrap requires it
        }, 5000);
    }

    //#################################################################################################

    const items = [
    document.querySelector('#instructions'),

    document.querySelector('#instructions'),
    document.querySelector('#instructions'),

    document.querySelector('.mic'),
    document.querySelector('.recording'),
    
    document.querySelector('footer'),

];

let currentItemIndex = 0;
function updateHighlight() {
    items.forEach((item, idx) => {
        if (idx === currentItemIndex) {
            item.classList.add('highlight-effect');
            item.style.filter = 'none'; // Remove blur from the highlighted element
            if(item == document.querySelector('.mic')){
                // Create a new 'change' event
var event = new Event('change');

// Dispatch it.
recordToggle.dispatchEvent(event);
            }
            if(item == document.querySelector('footer')){
                var event = new Event('change');
                recordToggle.dispatchEvent(event);
            }
        } else {
            item.classList.remove('highlight-effect');
            item.style.filter = 'blur(5px)'; // Apply blur to other elements
           
            
        }
    });
}

document.getElementById('next-btn').addEventListener('click', () => {
    currentItemIndex = (currentItemIndex + 1) % items.length;
    updateHighlight();
});

updateHighlight(); // Initialize

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////::
const overlay = document.getElementById('overlay');
    const audioPlayer = document.getElementById('audio-player');
    function removeAllBlur() {
        items.forEach(item => {
            item.classList.remove('highlight-effect');
            item.style.filter = 'none';
        });
    }
    document.getElementById('start-btn').addEventListener('click', () => {
        overlay.style.display = 'none'; // Hide the overlay
        audioPlayer.src = audioFiles[currentAudioIndex];
        audioPlayer.play().catch(e => console.error('Error playing audio:', e));
    });

    document.getElementById('skip-btn').addEventListener('click', () => {
        overlay.style.display = 'none'; // Hide the overlay
        audioPlayer.pause(); // Stop any playing audio
        currentAudioIndex = audioFiles.length; // Set to the end of the audio list
        removeAllBlur(); // Remove blur from all elements
    });
    const audioFiles = [
        '/css/salam.mp3',
        '/css/awalan.mp3',
        '/css/clicki l mic.mp3',
        "/css/katqra ljomla.mp3",
        "/css/finalisation.mp3",
        "/css/ich3ar.mp3",
        "/css/data.mp3",
        // Add more paths as needed
    ];
    let currentAudioIndex = 0;

    audioPlayer.onended = () => {
        if (currentAudioIndex < audioFiles.length - 1) {
        // Not the last audio, proceed to the next one
        setTimeout(() => {
            isTutorial = true;
            document.getElementById('next-btn').click();
            currentAudioIndex++;
            audioPlayer.src = audioFiles[currentAudioIndex];
            audioPlayer.play().catch(e => console.error('Error playing audio:', e));
        }, 0); // Adjust the wait time as needed
    } else {
        isTutorial = false;
        // Last audio finished, remove blur from all elements
        items.forEach(item => {
            item.classList.remove('highlight-effect');
            item.style.filter = 'none';
        });
    }
    };

});



            </script>
        </body>
</html>
        